ðŸŽ¯ Project Overview
Title: Full-Stack Social Network Application with .NET Core, React, and MobX

ðŸ“Œ Goal:
Build a feature-rich social network application, akin to Meetup or Facebook, from scratch using .NET Core 9.0, React 19 with TypeScript, and MobX. The application will allow users to register, authenticate, and participate in events, emphasizing modern design patterns, scalable architecture, and real-time web communication.

ðŸ“Œ Core Features & Highlights
âœ… Backend Development:
ðŸ”¹ Create a Web API using ASP.NET Core with Clean Architecture.
ðŸ”¹ Implement CQRS (Command Query Responsibility Segregation) with Mediator Pattern for maintainable and testable code.
ðŸ”¹ Utilize Entity Framework Core as the ORM for database interaction.
ðŸ”¹ Integrate SignalR for real-time web communication (e.g., chat features).
ðŸ”¹ Enable authentication with ASP.NET Core Identity.

âœ… Frontend Development:
ðŸ”¹ Build a client-side application using React 19 with TypeScript.
ðŸ”¹ Manage application state with MobX.
ðŸ”¹ Design a visually appealing UI using Material UI.
ðŸ”¹ Develop a custom photo upload widget with drag-and-drop functionality and image cropping.
ðŸ”¹ Incorporate React Router for navigation.
ðŸ”¹ Apply reusable form inputs and validation using React Hook Form and Zod.

âœ… Enhanced User Experience:
ðŸ”¹ Add login and registration features on the client side.
ðŸ”¹ Implement paging, sorting, and filtering for a seamless user experience

âœ… Deployment:
ðŸ”¹ Publish the application to Azure for public accessibility.

ðŸ’¡ Learning Journey
âœ” Begin with setting up the development environment and creating a multi-project solution using .NET Core CLI and create-react-app.
âœ” Master advanced topics like:
ðŸ”¹ Using AutoMapper in backend services.
ðŸ”¹ Implementing authentication flows with ASP.NET Core Identity.
ðŸ”¹ Leveraging React Query for efficient data fetching and caching.
âœ” Build incrementally, learning a new concept in every module, from backend to frontend.